#!/bin/bash

pipeline::docker_build() {
  local name="$1"
  local context="$2"
  local tags="$3"
  local registry="$4"

  if [ -z "$name" ]; then
    log::error "[pipeline::docker_build] image name is required"
    exit 1
  fi

  if [ -z "$context" ]; then
    log::error "[pipeline::docker_build] image context is required"
    exit 1
  fi

  if [ -z "$tags" ]; then
    log::error "[pipeline::docker_build] image tags is required"
    exit 1
  fi

  log::info ""
  log::info "################## Build Info ##################"
  log::info "context: $context"
  log::info "name: $name"
  log::info "tags: $tags"
  log::info "registry: $registry"
  log::info "################ Build Info END ################"
  log::info ""

  tags=$(string::split , ${tags})

  # local build_cmd="docker build"
  local build_cmd="docker buildx build"
    # build platform
  if [ -n "$PIPELINE_DOCKER_BUILD_PLATFORMS" ]; then
    build_cmd="${build_cmd} --platform ${PIPELINE_DOCKER_BUILD_PLATFORMS}"
  fi
  
  # auto push
  if [ "$NO_PUSH" != "true" ]; then
    build_cmd="${build_cmd} --push"
  fi

  # custom dockerfile path
  if [ -n "$PIPELINE_DOCKER_BUILD_DOCKERFILE" ]; then
    build_cmd="${build_cmd} -f ${PIPELINE_DOCKER_BUILD_DOCKERFILE}"
  fi

  if [ -n "$registry" ]; then
    local registries=$(string::split , ${registry})

    # @STAGE: build
    for registry in $registries; do
      for tag in $tags; do
        if [ -z "$tag" ]; then
          continue
        fi

        # ensure remove http:// and https://
        registry=${registry#http:\/\/}
        registry=${registry#https:\/\/}

        build_cmd="${build_cmd} --tag ${registry}/${name}:${tag}"
      done
    done
  else
    for tag in $tags; do
      if [ -z "$tag" ]; then
        continue
      fi

      build_cmd="${build_cmd} --tag ${name}:${tag}"
    done
  fi

  # Issue: cannot save build logs to file
  # Solution: https://forums.docker.com/t/capture-ouput-of-docker-build-into-a-log-file/123178
  # Reason: Thatâ€™s because the output is not on the standard output but the standard error stream.
  build_cmd="${build_cmd} --progress=plain"

  # build args
  if [ -n "$PIPELINE_DOCKER_BUILD_ARGS_ENVFILE" ]; then
    # local build_args=$(cat $PIPELINE_DOCKER_BUILD_ARGS_ENVFILE)
    # for arg in $build_args; do
    #   # ignore empty line
    #   if [ -z "$arg" ]; then
    #     continue
    #   fi

    #   # ignore # comment
    #   if [ "${arg:0:1}" == "#" ]; then
    #     continue
    #   fi

    #   build_cmd="${build_cmd} --build-arg ${arg}"
    # done

    # read line from envfile
    while IFS= read -r line; do
      # ignore empty line
      if [ -z "$line" ]; then
        continue
      fi

      # ignore # comment
      if [ "${line:0:1}" == "#" ]; then
        continue
      fi

      build_cmd="${build_cmd} --build-arg \"${line}\""
    done < $PIPELINE_DOCKER_BUILD_ARGS_ENVFILE
  fi

  # build cache
  if [ "$PIPELINE_DOCKER_BUILD_CACHE_ENABLE" = "true" ]; then
    build_cmd="${build_cmd} --cache-from type=registry,ref=${registry}/${name}:buildcache"
    build_cmd="${build_cmd} --cache-to type=registry,ref=${registry}/${name}:buildcache,mode=max"
  fi

  # build builder
  if [ -n "$PIPELINE_DOCKER_BUILD_BUILDER" ]; then
    build_cmd="${build_cmd} --builder ${PIPELINE_DOCKER_BUILD_BUILDER}"
  fi

  # build stage
  if [ -n "$PIPELINE_DOCKER_BUILD_STAGE" ]; then
    build_cmd="${build_cmd} --stage ${PIPELINE_DOCKER_BUILD_STAGE}"
  fi

  # build network
  if [ -n "$PIPELINE_DOCKER_BUILD_NETWORK" ]; then
    build_cmd="${build_cmd} --network ${PIPELINE_DOCKER_BUILD_NETWORK}"
  fi

  # build options
  if [ -n "$PIPELINE_DOCKER_BUILD_OPTIONS" ]; then
    build_cmd="${build_cmd} ${PIPELINE_DOCKER_BUILD_OPTIONS}"
  fi

  # build ssh
  if [ -n "$PIPELINE_DOCKER_BUILD_SSH" ]; then
    build_cmd="${build_cmd} --ssh ${PIPELINE_DOCKER_BUILD_SSH}"
  fi
  
  # build context extra
  if [ -n "$PIPELINE_DOCKER_BUILD_CONTEXT_EXTRA" ]; then
    local contexts=$(string::split , $PIPELINE_DOCKER_BUILD_CONTEXT_EXTRA)
    for one in ${contexts}; do
      build_cmd="${build_cmd} --build-context ${one}"
    done
  fi

  # with context
  build_cmd="${build_cmd} ${context}"

  # if [ -n "$PIPELINE_DOCKER_BUILD_DEBUG" ]; then
  #   log::info "build_cmd: $build_cmd"
  # fi

  local tmp_file=$(os::tmp_file)
  echo "$build_cmd" > $tmp_file

  log::info "build_cmd: $(cat $tmp_file)"
  bash $tmp_file
}

export -f pipeline::docker_build
