#!/bin/bash

pipeline::docker_build() {
  local name="$1"
  local context="$2"
  local tags="$3"
  local registry="$4"

  if [ -z "$name" ]; then
    log::error "[pipeline::docker_build] image name is required"
    exit 1
  fi

  if [ -z "$context" ]; then
    log::error "[pipeline::docker_build] image context is required"
    exit 1
  fi

  if [ -z "$tags" ]; then
    log::error "[pipeline::docker_build] image tags is required"
    exit 1
  fi

  log::info ""
  log::info "################## Build Info ##################"
  log::info "context: $context"
  log::info "name: $name"
  log::info "tags: $tags"
  log::info "registry: $registry"
  log::info "################ Build Info END ################"
  log::info ""

  tags=$(string::split , ${tags})

  local build_scripts="docker buildx build"
  # local build_scripts="docker build"

  if [ -n "$registry" ]; then
    local registries=$(string::split , ${registry})

    # @STAGE: build
    for registry in $registries; do
      for tag in $tags; do
        if [ -z "$tag" ]; then
          continue
        fi

        # ensure remove http:// and https://
        registry=${registry#http:\/\/}
        registry=${registry#https:\/\/}

        build_scripts="${build_scripts} --tag ${registry}/${name}:${tag}"
      done
    done
  else
    for tag in $tags; do
      if [ -z "$tag" ]; then
        continue
      fi

      build_scripts="${build_scripts} --tag ${name}:${tag}"
    done
  fi

  # Issue: cannot save build logs to file
  # Solution: https://forums.docker.com/t/capture-ouput-of-docker-build-into-a-log-file/123178
  # Reason: Thatâ€™s because the output is not on the standard output but the standard error stream.
  build_scripts="${build_scripts} --progress=plain"

  # with context
  build_scripts="${build_scripts} ${context}"

  if [ -n "$PIPELINE_DOCKER_BUILD_DEBUG" ]; then
    log::info "build_scripts: $build_scripts"
  fi

  $build_scripts
}

export -f pipeline::docker_build
